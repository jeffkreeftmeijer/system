:PROPERTIES:
:ID:       33B0C1A7-3CCE-46A3-90FE-71AE25517A15
:ROAM_ALIASES: nix-config
:header-args: :eval no
:END:
#+title: Nix configuration
#+author: Jeff Kreeftmeijer
#+options: toc:2

#+include: ./nix-home-manager.org

* Modules

** home-manager

Home manager added itself to =home.nix=, but we're moving it to a module to keep program-specific settings out of the main file:

#+caption: =modules/home-manager.nix=
#+headers: :tangle modules/home-manager.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:

  {
    programs.home-manager.enable = true;
  }
#+end_src

With the new module in place, import it in =home.nix= and remove the now duplicate =programs.home-manager=:

#+begin_src diff
diff --git a/home.nix b/home.nix
index 6f6f86d..09e001a 100644
--- a/home.nix
+++ b/home.nix
@@ -1,13 +1,13 @@
 { config, pkgs, ... }:
 
+imports = [
+  ./modules/home-manager.nix
+];
+
 {
   home = {
     username = "jeffkreeftmeijer";
     homeDirectory = "/Users/jeffkreeftmeijer";
     stateVersion = "22.11";
   };
-
-  programs.home-manager = {
-    enable = true;
-  };
 }
#+end_src

** direnv

[[https://direnv.net][Direnv]] loads and unloads packages based on the curent directory to create per-project development environments.

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+begin_src shell
  direnv --version
#+end_src

#+RESULTS[76c6f95454c8be913fe23f78d4d384d057d77744]:
: 2.32.2

*** Nix configuration
:PROPERTIES:
:CUSTOM_ID: direnv-nix-configuratuon
:END:

The direnv program depends on a shell being enabled for it to hook in.
This module enables zsh for that purpose:

#+caption: =~/.config/nixkgs/modules/direnv.nix=
#+headers: :tangle modules/direnv.nix
#+begin_src nix
  {
    programs.direnv.enable = true;
    programs.zsh.enable = true;
  }
#+end_src

** emacs

Emacs, built from source from the master branch:

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+headers: :results text
#+begin_src emacs-lisp
  (concat
   "GNU Emacs "
   emacs-version
   " (" emacs-repository-branch " @ " emacs-repository-version ")")
#+end_src

#+RESULTS[d0a28aa425cae94a5b9f635388232d20669dc8f9]:
: GNU Emacs 30.0.50 (master @ dec09aaeb616e7648f4694d76090cc8e269471e0)

My current version was built with the following options:[fn:prefix]

[fn:prefix]In reality, Nix also sets a =--prefix= because it installs Emacs in a custom location, like =/nix/store/x6nsbfr31nphxzn2f9c8iyc66rxvmi7d-emacs-git-20230321.0=.
I consider that a Nix artifact, and not an Emacs configuration setting.

Another option I did include above is =--disable-build-details=, which is also set by Nix [[https://github.com/NixOS/nixpkgs/commit/496f9309480b22173e25885bc7c128c30fbd4da3][for a more reproducable build]].
In practice, that means the host names and build times are omitted from the built program to keep its hash stable for Nix's cache.


#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports results
#+headers: :wrap src shell
#+begin_src emacs-lisp
  (concat "./configure "
	  (string-join (cdr (split-string system-configuration-options " "))
		       " \\\n"))
#+end_src

#+RESULTS[fbd71416735eb4da4353bed18d840e3a2718b2cb]:
#+begin_src shell
./configure --disable-build-details \
--with-modules \
--with-ns \
--disable-ns-self-contained \
--with-native-compilation
#+end_src

This produces a build with the following features enabled:

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports results
#+begin_src emacs-lisp
system-configuration-features
#+end_src

#+RESULTS[35cf9621cff446642956b65406a2f88c92d2d0c5]:
: ACL GLIB GMP GNUTLS JPEG JSON LIBXML2 MODULES NATIVE_COMP NOTIFY KQUEUE NS PDUMPER PNG RSVG SQLITE3 THREADS TIFF TOOLKIT_SCROLL_BARS TREE_SITTER WEBP ZLIB

*** Nix configuration
:PROPERTIES:
:CUSTOM_ID: emacs-nix-configuratuon
:END:

I'm running a [[https://github.com/jeffkreeftmeijer/.emacs.d][custom Emacs overlay]] based on [[https://github.com/nix-community/emacs-overlay][emacs-overlay]] to install Emacs from source, based on the latest version on the master branch:
It's added as an input in =flake.nix=:


#+name: configured-emacs-input
#+begin_src nix
  configured-emacs = {
    url = "github:jeffkreeftmeijer/.emacs.d/main";
    inputs.nixpkgs.follows = "nixpkgs";
  };
#+end_src

In the outputs, =pkgs= is extended to include the overlay:

#+name: flake-output
#+begin_src nix
  outputs = { nixpkgs, home-manager, configured-emacs, ... }:
    let
      system = "x86_64-darwin";
      pkgs = nixpkgs.legacyPackages.${system}.extend(configured-emacs.overlay);
    in {
      homeConfigurations.jeffkreeftmeijer = home-manager.lib.homeManagerConfiguration {
	inherit pkgs;

	modules = [
          ./home.nix
	];
      };
    };
#+end_src

#+headers: :noweb yes
#+headers: :tangle flake.nix
#+headers: :exports none
#+begin_src nix
  {
    description = "Home Manager configuration";

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
      home-manager = {
        url = "github:nix-community/home-manager";
        inputs.nixpkgs.follows = "nixpkgs";
      };
      <<configured-emacs-input>>
    };

    <<flake-output>>
  }
#+end_src

Then, add Emacs to =home.packages=:

#+caption: =modules/emacs.nix=
#+headers: :tangle modules/emacs.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:
  {
    home.packages = [ pkgs.configured-emacs pkgs.elixir-ls ];
  }
#+end_src

** git

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+begin_src shell
  git --version
#+end_src

#+RESULTS[ea1662b458130df3688c79b48d34eb0215cc65b0]:
: git version 2.39.2

*** Settings
:PROPERTIES:
:header-args: :noweb-ref git-nix-settings :eval no
:CUSTOM_ID: git-settings
:END:

**** Set the user name and email fields

#+begin_src nix
  programs.git.userName = "Jeff Kreeftmeijer";
  programs.git.userEmail = "jeff@kreeft.me";
#+end_src

**** Use "main" as the default branch

#+begin_src nix
  programs.git.extraConfig.init.defaultBranch = "main";
#+end_src

**** Set GitHub username

#+begin_src nix
  programs.git.extraConfig.github.user = "jeffkreeftmeijer";
#+end_src

**** Ignore ~.DS_Store~ files

#+begin_src nix
  programs.git.ignores = ["DS_Store"];
#+end_src

*** Nix configuration
:PROPERTIES:
:CUSTOM_ID: git-nix-configuratuon
:END:

#+caption: =modules/git.nix=
#+headers: :tangle modules/git.nix
#+headers: :noweb yes
#+begin_src nix
  {
    programs.git.enable = true;
    <<git-nix-settings>>
  }
#+end_src

*** Generated configuration file
:PROPERTIES:
:CUSTOM_ID: git-configuration-file
:END:

#+headers: :cache yes
#+headers: :eval yes
#+headers: :results code
#+headers: :exports results
#+headers: :wrap src gitconfig
#+begin_src shell
cat ~/.config/git/config
#+end_src

#+caption: =~/.config/git/config=
#+RESULTS[0b540e2fe346e6609744e853d1c5340b7141144c]:
#+begin_src gitconfig
[init]
	defaultBranch = "main"

[user]
	email = "jeff@kreeft.me"
	name = "Jeff Kreeftmeijer"
#+end_src

** gpg

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+headers: :results scalar
#+begin_src shell
  gpg --version
#+end_src

#+RESULTS[136aaccd7203d32f62d31020ecd3695ae7273593]:
#+begin_example
gpg (GnuPG) 2.4.0
libgcrypt 1.10.1
Copyright (C) 2021 Free Software Foundation, Inc.
License GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /Users/jeffkreeftmeijer/.gnupg
Supported algorithms:
Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2
#+end_example

*** Nix configuration
:PROPERTIES:
:CUSTOM_ID: gpg-nix-configuratuon
:END:

#+caption: =modules/gpg.nix=
#+headers: :tangle modules/gpg.nix
#+begin_src nix
  {
    programs.gpg.enable = true;
  }
#+end_src

** pass

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+headers: :results scalar
#+begin_src shell
  pass --version
#+end_src

*** Nix configuration
:PROPERTIES:
:CUSTOM_ID: pass-nix-configuratuon
:END:

#+caption: =modules/pass.nix=
#+headers: :tangle modules/pass.nix
#+begin_src nix
  {
    programs.password-store.enable = true;
  }
#+end_src

** tmux

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+begin_src shell
  tmux -V
#+end_src

#+RESULTS[d890824c56ae02ca54fbf0eb2e021e0279769f76]:
: tmux 3.3a

*** Settings
:PROPERTIES:
:CUSTOM_ID: tmux-settings
:END:

- Install an updated version of ncurses to [[https://jeffkreeftmeijer.com/tmux-ncurses/][fix issues with =tmux-256color= terminals]].

  #+name: tmux-packages
  #+begin_src nix
    home.packages = [ pkgs.ncurses ];
  #+end_src

- Remove tmux-sensible from [[https://jeffkreeftmeijer.com/nix-home-manager-tmux-defaults/][Nix tmux defaults]]:

  #+headers: :noweb-ref tmux-nix-settings
  #+begin_src nix
    programs.tmux.sensibleOnTop = false;
  #+end_src

- [[https://jeffkreeftmeijer.com/tmux-escape-time/][Set =escape-time= to 0]]:

  #+headers: :noweb-ref tmux-nix-settings
  #+begin_src nix
    programs.tmux.escapeTime = 0;
  #+end_src

- Use vi-style key bindings:

  #+headers: :noweb-ref tmux-nix-settings
  #+begin_src nix
    programs.tmux.keyMode = "vi";
  #+end_src

*** Nix configuration
:PROPERTIES:
:CUSTOM_ID: tmux-nix-configuratuon
:END:

#+caption: =modules/tmux.nix=
#+headers: :tangle modules/tmux.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:
  {
    <<tmux-packages>>
    programs.tmux.enable = true;
    <<tmux-nix-settings>>
  }
#+end_src

*** Generated configuration file
:PROPERTIES:
:CUSTOM_ID: tmux-configuration-file
:END:

#+caption: =~/.config/tmux/tmux.conf=
#+headers: :cache yes
#+headers: :eval yes
#+headers: :outputs results
#+headers: :results code
#+headers: :wrap src tmux
#+begin_src shell
cat ~/.config/tmux/tmux.conf
#+end_src

#+RESULTS[e734fbbaa242f8594633df84a086dd82a36a83d5]:
#+begin_src tmux

set  -g default-terminal "screen"
set  -g base-index      0
setw -g pane-base-index 0





set -g status-keys vi
set -g mode-keys   vi







set  -g mouse             off
setw -g aggressive-resize off
setw -g clock-mode-style  12
set  -s escape-time       0
set  -g history-limit     2000

#+end_src

** zsh

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+begin_src shell
  zsh --version
#+end_src

#+RESULTS[e99f22e09a686ab11189774093997dc75be3d5a7]:
: zsh 5.9 (x86_64-apple-darwin22.3.0)

*** Settings
:PROPERTIES:
:header-args: :noweb-ref zsh-settings :eval no
:CUSTOM_ID: zsh-settings
:END:

**** [[https://jeffkreeftmeijer.com/nix-home-manager-zsh-defaults/][Disable command completion]]

#+begin_src nix
  programs.zsh.enableCompletion = false;
#+end_src

**** Enable [[https://github.com/zsh-users/zsh-history-substring-search][zsh-history-substring-search]]

#+begin_src nix
  programs.zsh.historySubstringSearch.enable = true;
#+end_src

**** [[https://jeffkreeftmeijer.com/nix-home-manager-git-prompt/][Add current git repository status to shell prompt]]

#+begin_src nix
  programs.zsh.initExtra =
  ''
  source ~/.nix-profile/share/git/contrib/completion/git-prompt.sh
  setopt PROMPT_SUBST
  export PS1='%~ $(__git_ps1 "(%s) ")%# '
  '';
#+end_src

Since this depends on git, we'll also add git to this module's =home.packages= list:

#+name: zsh-packages
#+headers: :noweb-ref no
#+begin_src nix
  home.packages = [ pkgs.git ];
#+end_src

*** Nix configuration
:PROPERTIES:
:CUSTOM_ID: zsh-nix-configuratuon
:END:

#+caption: =modules/zsh.nix=
#+headers: :tangle modules/zsh.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:
  {
    <<zsh-packages>>
    programs.zsh.enable = true;
    <<zsh-settings>>
  }
#+end_src

*** Generated configuration file
:PROPERTIES:
:CUSTOM_ID: zsh-configuration-file
:END:

#+headers: :cache yes
#+headers: :eval yes
#+headers: :results code
#+headers: :exports results
#+headers: :wrap src zsh
#+begin_src shell
cat ~/.zshrc
#+end_src

#+caption: =~/.zshrc=
#+RESULTS[6e82086d38f04ae941fd3a1aa8a2322930460e06]:
#+begin_src zsh

typeset -U path cdpath fpath manpath

for profile in ${(z)NIX_PROFILES}; do
  fpath+=($profile/share/zsh/site-functions $profile/share/zsh/$ZSH_VERSION/functions $profile/share/zsh/vendor-completions)
done

HELPDIR="/nix/store/prgvdaam2gnp7is5mraq25rhrrj76rw0-zsh-5.9/share/zsh/$ZSH_VERSION/help"





# Oh-My-Zsh/Prezto calls compinit during initialization,
# calling it twice causes slight start up slowdown
# as all $fpath entries will be traversed again.










# History options should be set in .zshrc and after oh-my-zsh sourcing.
# See https://github.com/nix-community/home-manager/issues/177.
HISTSIZE="10000"
SAVEHIST="10000"

HISTFILE="$HOME/.zsh_history"
mkdir -p "$(dirname "$HISTFILE")"

setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
unsetopt HIST_EXPIRE_DUPS_FIRST
setopt SHARE_HISTORY
unsetopt EXTENDED_HISTORY


source ~/.nix-profile/share/git/contrib/completion/git-prompt.sh
setopt PROMPT_SUBST
export PS1='%~ $(__git_ps1 "(%s) ")%# '

eval "$(/nix/store/l372b7br02g12dp5lxys8s4zw629g3cq-direnv-2.32.2/bin/direnv hook zsh)"


# Aliases


# Named Directory Hashes



source /nix/store/rbphvmksmhq97431yfsc710xmmi9qsan-zsh-history-substring-search-1.0.2/share/zsh-history-substring-search/zsh-history-substring-search.zsh
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
#+end_src

* Summary

Finally, the =home.nix= main configuration file imports all modules:

#+caption: =home.nix=
#+headers: :tangle home.nix
#+headers: :noweb yes
#+begin_src nix
  { config, pkgs, ... }:

  {
    imports = [
      ./modules/home-manager.nix
      ./modules/direnv.nix
      ./modules/emacs.nix
      ./modules/git.nix
      ./modules/gpg.nix
      ./modules/pass.nix
      ./modules/tmux.nix
      ./modules/zsh.nix
    ];

    home = {
      username = "jeffkreeftmeijer";
      homeDirectory = "/Users/jeffkreeftmeijer";
      stateVersion = "22.11";
    };
  }
#+end_src
