:PROPERTIES:
:ID:       33B0C1A7-3CCE-46A3-90FE-71AE25517A15
:ROAM_ALIASES: nix-config
:header-args: :eval no
:END:
#+title: Nix configuration
#+author: Jeff Kreeftmeijer
#+options: toc:2

* Nix

** Install Nix

Follow the [[https://nixos.org/download.html#nix-install-macos][install instructions for macOS]], which guides you through the installation:

#+begin_src shell
  sh <(curl -L https://nixos.org/nix/install)
#+end_src

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+begin_src shell
  nix --version
#+end_src

#+RESULTS[140e58f84c79ece285687dd1361d33612cd6a84f]:
: nix (Nix) 2.13.3

** Run a program with Nix

Use =nix run= to run a program with Nix.
For example, to try [[https://fishshell.com][fish]]:

#+begin_src shell
  nix run nixpkgs#fish\
      --extra-experimental-features nix-command \
      --extra-experimental-features flakes
#+end_src

This fetches the fish package from [[https://github.com/NixOS/nixpkgs][nixpkgs]], downloads it to the Nix store and starts it.
Although some fish files are found in the Nix store, fish isn't isnstalled on the main system after the Nix shell running it exits.

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+begin_src shell
  ls /nix/store/ | grep fish
#+end_src

#+RESULTS[eea63388eadbbe78035a725abd3842aa30653221]:
: 61zcpdy6dxr582jwzjnzi2vm8hyw97p6-fish-3.6.0.tar.xz.drv
: 6h7nvjphylacsmqjxz9cz3jab835ga68-fish-3.6.0.drv
: 9sbayh5pr3r8c9dh1navixin3psgvvyh-completion.fish
: d9r2150gr3b605pnsn5hydjc4zjxxsfc-config.fish.appendix.drv
: igsjkga6f9x3xd4l86phypx2jh4k92ks-completion.fish
: rwscd4qmlsmxc1idj9pxc5ab8543nfww-__fish_build_paths_suffix.fish.drv
: s1nbl9wxn68m846apki35iyiqrh4bkg5-fish-3.6.0

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+headers: :prologue exec 2>&1
#+headers: :epilogue ":"
#+begin_src shell
  which fish
#+end_src

#+RESULTS[01feaaf4eb76f1144d4ca3f56c1333e553dd9064]:
: fish not found

** Extra experimental features

The =nix run= command relies on the =nix-command= and =flakes= features. 
As of src_shell{nix --version | cut -d' ' -f3}, both of these are experimental and disabled by default:
They're enabled using the =--extra-experimental-features= flag:

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+headers: :prologue exec 2>&1
#+headers: :epilogue ":"
#+begin_src shell
  nix run nixpkgs#fish
#+end_src

#+RESULTS[4fad5848704d1feb332d0a04f64ad9ef1ad1e36d]:
: error: experimental Nix feature 'nix-command' is disabled; use '--extra-experimental-features nix-command' to override

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+headers: :prologue exec 2>&1
#+headers: :epilogue ":"
#+begin_src shell
  nix run nixpkgs#fish\
      --extra-experimental-features nix-command
#+end_src

#+RESULTS[d1b3fdc04ce92c33d4b81fdcecaac88c77e65ef9]:
: error: experimental Nix feature 'flakes' is disabled; use '--extra-experimental-features flakes' to override

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+headers: :prologue exec 2>&1
#+headers: :epilogue ":"
#+begin_src shell
  nix run nixpkgs#fish\
      --extra-experimental-features nix-command \
      --extra-experimental-features flakes
#+end_src

#+RESULTS[510f95eb10ca1709870b3ee9da687a852e72ddb6]:

To enable these features globally, set =experimental-featurs= in =nix.conf=:

#+begin_src shell
mkdir -p ~/.config/nix
echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
#+end_src

#+headers: :cache yes
#+headers: :eval yes
#+headers: :results code
#+headers: :exports results
#+headers: :wrap src nix
#+begin_src shell
cat ~/.config/nix/nix.conf
#+end_src

#+caption: =~/.config/nix/nix.conf=
#+RESULTS[8b18fede23ad0d5809a2900ec9efd45bc27933c0]:
#+begin_src nix
experimental-features = nix-command flakes
#+end_src

* Home Manager

** Set up Home Manager

Set up a flake with the Home Manager template by running =flake new=:

#+headers: :prologue rm ~/.config/nixpkgs/flake.nix
#+begin_src shell
  nix flake new ~/.config/nixpkgs -t github:nix-community/home-manager
#+end_src

#+caption: =~/.config/nixpkgs/flake.nix=
#+headers: :cache yes
#+headers: :exorts results
#+headers: :results scalar
#+headers: :wrap src nix
#+begin_src shell
cat ~/.config/nixpkgs/flake.nix
#+end_src

#+RESULTS[fe747e4c90aed55a57a2f6a465840189a6e6d475]:
#+begin_src nix
{
  description = "Home Manager configuration of Jane Doe";

  inputs = {
    # Specify the source of Home Manager and Nixpkgs.
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { nixpkgs, home-manager, ... }:
    let
      system = "x86_64-linux";
      pkgs = nixpkgs.legacyPackages.${system};
    in {
      homeConfigurations.jdoe = home-manager.lib.homeManagerConfiguration {
        inherit pkgs;

        # Specify your home configuration modules here, for example,
        # the path to your home.nix.
        modules = [ ./home.nix ];

        # Optionally use extraSpecialArgs
        # to pass through arguments to home.nix
      };
    };
}
#+end_src

Then, update the output system and username and remove the boilerplate:

#+caption: =~/.config/nixpkgs/flake.nix=
#+begin_src nix
  {
    description = "Home Manager configuration";

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
      home-manager = {
        url = "github:nix-community/home-manager";
        inputs.nixpkgs.follows = "nixpkgs";
      };
    };

    outputs = { nixpkgs, home-manager, ... }:
      let
        system = "x86_64-darwin";
        pkgs = nixpkgs.legacyPackages.${system};
      in {
        homeConfigurations.jeffkreeftmeijer = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;

          modules = [
            ./home.nix
          ];
        };
      };
  }
#+end_src

For Home Manager's configuration, create =home.nix=.
It lists your use name and home directory, but also the =stateVersion=, which determines the Home Manager release the configuration is compatible with.
The =home.nix= file also sets up Home Manager to install and manage itself:

#+caption: =~/.config/nixpkgs/home.nix=
#+begin_src nix
  { config, pkgs, ... }:

  {
    home = {
      username = "jeffkreeftmeijer";
      homeDirectory = "/Users/jeffkreeftmeijer";
      stateVersion = "22.11";
    };

    programs.home-manager = {
      enable = true;
    };
  }
#+end_src

Finally, install Home Manager and apply the configuration:

#+begin_src shell
  nix run ~/.config/nixpkgs#homeConfigurations.jeffkreeftmeijer.activationPackage
#+end_src

Running the =activationPackage= generates a =flake.lock= file, which locks all packages to their currently installed versions for reproducability.
It only lists Home Manager now, but installed packages will be added to the list when they're added.

** Installing packages

To install a package, add it to =home.packages= in =home.nix=:

#+begin_src diff
diff --git a/home.nix b/home.nix
index 6f6f86d..12f9efe 100644
--- a/home.nix
+++ b/home.nix
@@ -5,6 +5,7 @@
     username = "jeffkreeftmeijer";
     homeDirectory = "/Users/jeffkreeftmeijer";
     stateVersion = "22.11";
+    packages = [ pkgs.git ];
   };
 
   programs.home-manager = {
#+end_src

Then, update the environment by running =home-manager switch=:

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+begin_src shell
  home-manager switch
#+end_src

#+RESULTS[a54bed91c273e3fba16b5667709e2e4fb742fbe2]:
#+begin_example
Starting Home Manager activation
Activating checkFilesChanged
Activating checkLaunchAgents
Activating checkLinkTargets
Activating writeBoundary
Activating copyFonts
Activating installPackages
replacing old 'home-manager-path'
installing 'home-manager-path'
Activating linkGeneration
Cleaning up orphan links from /Users/jeffkreeftmeijer
Creating profile generation 2
Creating home file links in /Users/jeffkreeftmeijer
Activating onFilesChange
Activating setupLaunchAgents
#+end_example

* Modules

** home-manager

Home manager added itself to =home.nix=, but we're moving it to a module to keep program-specific settings out of the main file:

#+caption: =~/.config/nixpkgs/modules/home-manager.nix=
#+headers: :tangle modules/home-manager.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:

  {
    programs.home-manager.enable = true;
  }
#+end_src

With the new module in place, import it in =home.nix= and remove the now duplicate =programs.home-manager=:

#+begin_src diff
diff --git a/home.nix b/home.nix
index 6f6f86d..09e001a 100644
--- a/home.nix
+++ b/home.nix
@@ -1,13 +1,13 @@
 { config, pkgs, ... }:
 
+imports = [
+  ./modules/home-manager.nix
+];
+
 {
   home = {
     username = "jeffkreeftmeijer";
     homeDirectory = "/Users/jeffkreeftmeijer";
     stateVersion = "22.11";
   };
-
-  programs.home-manager = {
-    enable = true;
-  };
 }
#+end_src

** direnv

[[https://direnv.net][Direnv]] loads and unloads packages based on the curent directory to create per-project development environments.

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+begin_src shell
  direnv --version
#+end_src

#+RESULTS[76c6f95454c8be913fe23f78d4d384d057d77744]:
: 2.32.2

*** Nix configuration

The direnv program depends on a shell being enabled for it to hook in.
This module enables zsh for that purpose:

#+caption: =~/.config/nixkgs/modules/direnv.nix=
#+headers: :tangle modules/direnv.nix
#+begin_src nix
  {
    programs.direnv.enable = true;
    programs.zsh.enable = true;
  }
#+end_src

** emacs

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+headers: :results scalar
#+begin_src shell
  emacs --version | head -n1
#+end_src

#+RESULTS[cdc9c33f2eb37a2ef38440c5cd6f13b579515394]:
: GNU Emacs 30.0.50

*** Nix configuration

Use [[https://github.com/nix-community/emacs-overlay][emacs-overlay]] to install Emacs from source, based on the latest version on the master branch.
To do this, add the overlay to the inputs in =flake.nix=:

#+begin_src diff
	  index 3e15177..7e7eebc 100644
  --- a/flake.nix
  +++ b/flake.nix
  @@ -7,12 +7,16 @@
	 url = "github:nix-community/home-manager";
	 inputs.nixpkgs.follows = "nixpkgs";
       };
  +    emacs-overlay = {
  +      url = "github:nix-community/emacs-overlay";
  +      inputs.nixpkgs.follows = "nixpkgs";
  +    };
     };

  -  outputs = { nixpkgs, home-manager, ... }:
  +  outputs = { nixpkgs, home-manager, emacs-overlay, ... }:
       let
	 system = "x86_64-darwin";
  -      pkgs = nixpkgs.legacyPackages.${system};
  +      pkgs = nixpkgs.legacyPackages.${system}.extend(emacs-overlay.overlay);
       in {
	 homeConfigurations.jeffkreeftmeijer = home-manager.lib.homeManagerConfiguration {
	   inherit pkgs;
#+end_src

#+headers: :tangle flake.nix
#+headers: :exports none
#+begin_src nix
  {
    description = "Home Manager configuration";

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
      home-manager = {
        url = "github:nix-community/home-manager";
        inputs.nixpkgs.follows = "nixpkgs";
      };
      emacs-overlay = {
        url = "github:nix-community/emacs-overlay";
        inputs.nixpkgs.follows = "nixpkgs";
      };
    };

    outputs = { nixpkgs, home-manager, emacs-overlay, ... }:
      let
        system = "x86_64-darwin";
        pkgs = nixpkgs.legacyPackages.${system}.extend(emacs-overlay.overlay);
      in {
        homeConfigurations.jeffkreeftmeijer = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;

          modules = [
            ./home.nix
          ];
        };
      };
  }
#+end_src

Then, add the Emacs module, which enables the program and switches the package to =emacsGit-nox=:

#+caption: =~/.config/nixpkgs/modules/emacs.nix=
#+headers: :tangle modules/emacs.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:
  {
    programs.emacs.enable = true;
    programs.emacs.package = pkgs.emacsGit;
  }
#+end_src

** git

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+begin_src shell
  git --version
#+end_src

#+RESULTS[ea1662b458130df3688c79b48d34eb0215cc65b0]:
: git version 2.39.2

*** Settings
:PROPERTIES:
:header-args: :noweb-ref git-settings :eval no
:END:

**** Set the user name and email fields

#+begin_src nix
  programs.git.userName = "Jeff Kreeftmeijer";
  programs.git.userEmail = "jeff@kreeft.me";
#+end_src

**** Use "main" as the default branch

#+begin_src nix
  programs.git.extraConfig.init.defaultBranch = "main";
#+end_src

**** Ignore ~.DS_Store~ files

#+begin_src nix
  programs.git.ignores = ["DS_Store"];
#+end_src

*** Nix configuration

#+caption: =~/.config/nixpkgs/modules/git.nix=
#+headers: :tangle modules/git.nix
#+headers: :noweb yes
#+begin_src nix
  {
    programs.git.enable = true;
    <<git-settings>>
  }
#+end_src

*** Generated configuration file

#+headers: :cache yes
#+headers: :eval yes
#+headers: :results code
#+headers: :exports results
#+headers: :wrap src gitconfig
#+begin_src shell
cat ~/.config/git/config
#+end_src

#+caption: =~/.config/git/config=
#+RESULTS[0b540e2fe346e6609744e853d1c5340b7141144c]:
#+begin_src gitconfig
[init]
	defaultBranch = "main"

[user]
	email = "jeff@kreeft.me"
	name = "Jeff Kreeftmeijer"
#+end_src

** tmux

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+begin_src shell
  tmux -V
#+end_src

#+RESULTS[d890824c56ae02ca54fbf0eb2e021e0279769f76]:
: tmux 3.3a

*** Settings

- Install an updated version of ncurses to [[https://jeffkreeftmeijer.com/tmux-ncurses/][fix issues with =tmux-256color= terminals]].

  #+name: tmux-packages
  #+begin_src nix
    home.packages = [ pkgs.ncurses ];
  #+end_src

- Remove tmux-sensible from [[https://jeffkreeftmeijer.com/nix-home-manager-tmux-defaults/][Nix tmux defaults]]:

  #+headers: :noweb-ref tmux-settings
  #+begin_src nix
    programs.tmux.sensibleOnTop = false;
  #+end_src

- [[https://jeffkreeftmeijer.com/tmux-escape-time/][Set =escape-time= to 0]]:

  #+headers: :noweb-ref tmux-settings
  #+begin_src nix
    programs.tmux.escapeTime = 0;
  #+end_src

- Use vi-style key bindings:

  #+headers: :noweb-ref tmux-settings
  #+begin_src nix
    programs.tmux.keyMode = "vi";
  #+end_src

*** Nix configuration

#+caption: =~/.config/nixpkgs/modules/tmux.nix=
#+headers: :tangle modules/tmux.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:
  {
    <<tmux-packages>>
    programs.tmux.enable = true;
    <<tmux-settings>>
  }
#+end_src

*** Generated configuration file

#+caption: =~/.config/tmux/tmux.conf=
#+headers: :cache yes
#+headers: :eval yes
#+headers: :outputs results
#+headers: :results code
#+headers: :wrap src tmux
#+begin_src shell
cat ~/.config/tmux/tmux.conf
#+end_src

#+RESULTS[e734fbbaa242f8594633df84a086dd82a36a83d5]:
#+begin_src tmux

set  -g default-terminal "screen"
set  -g base-index      0
setw -g pane-base-index 0





set -g status-keys vi
set -g mode-keys   vi







set  -g mouse             off
setw -g aggressive-resize off
setw -g clock-mode-style  12
set  -s escape-time       0
set  -g history-limit     2000

#+end_src

** zsh

#+headers: :cache yes
#+headers: :eval yes
#+headers: :exports both
#+begin_src shell
  zsh --version
#+end_src

#+RESULTS[e99f22e09a686ab11189774093997dc75be3d5a7]:
: zsh 5.9 (x86_64-apple-darwin22.3.0)

*** Settings
:PROPERTIES:
:header-args: :noweb-ref zsh-settings :eval no
:END:

**** [[https://jeffkreeftmeijer.com/nix-home-manager-zsh-defaults/][Disable command completion]]

#+begin_src nix
  programs.zsh.enableCompletion = false;
#+end_src

**** Enable [[https://github.com/zsh-users/zsh-history-substring-search][zsh-history-substring-search]]

#+begin_src nix
  programs.zsh.historySubstringSearch.enable = true;
#+end_src

**** [[https://jeffkreeftmeijer.com/nix-home-manager-git-prompt/][Add current git repository status to shell prompt]]

#+begin_src nix
  programs.zsh.initExtra =
  ''
  source ~/.nix-profile/share/git/contrib/completion/git-prompt.sh
  setopt PROMPT_SUBST
  export PS1='%~ $(__git_ps1 "(%s) ")%# '
  '';
#+end_src

Since this depends on git, we'll also add git to this module's =home.packages= list:

#+name: zsh-packages
#+headers: :noweb-ref no
#+begin_src nix
  home.packages = [ pkgs.git ];
#+end_src

*** Nix configuration

#+caption: =~/.config/nixpkgs/modules/zsh.nix=
#+headers: :tangle modules/zsh.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:
  {
    <<zsh-packages>>
    programs.zsh.enable = true;
    <<zsh-settings>>
  }
#+end_src

*** Generated configuration file

#+headers: :cache yes
#+headers: :eval yes
#+headers: :results code
#+headers: :exports results
#+headers: :wrap src zsh
#+begin_src shell
cat ~/.zshrc
#+end_src

#+caption: =~/.zshrc=
#+RESULTS[6e82086d38f04ae941fd3a1aa8a2322930460e06]:
#+begin_src zsh

typeset -U path cdpath fpath manpath

for profile in ${(z)NIX_PROFILES}; do
  fpath+=($profile/share/zsh/site-functions $profile/share/zsh/$ZSH_VERSION/functions $profile/share/zsh/vendor-completions)
done

HELPDIR="/nix/store/prgvdaam2gnp7is5mraq25rhrrj76rw0-zsh-5.9/share/zsh/$ZSH_VERSION/help"





# Oh-My-Zsh/Prezto calls compinit during initialization,
# calling it twice causes slight start up slowdown
# as all $fpath entries will be traversed again.










# History options should be set in .zshrc and after oh-my-zsh sourcing.
# See https://github.com/nix-community/home-manager/issues/177.
HISTSIZE="10000"
SAVEHIST="10000"

HISTFILE="$HOME/.zsh_history"
mkdir -p "$(dirname "$HISTFILE")"

setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
unsetopt HIST_EXPIRE_DUPS_FIRST
setopt SHARE_HISTORY
unsetopt EXTENDED_HISTORY


source ~/.nix-profile/share/git/contrib/completion/git-prompt.sh
setopt PROMPT_SUBST
export PS1='%~ $(__git_ps1 "(%s) ")%# '

eval "$(/nix/store/l372b7br02g12dp5lxys8s4zw629g3cq-direnv-2.32.2/bin/direnv hook zsh)"


# Aliases


# Named Directory Hashes



source /nix/store/rbphvmksmhq97431yfsc710xmmi9qsan-zsh-history-substring-search-1.0.2/share/zsh-history-substring-search/zsh-history-substring-search.zsh
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
#+end_src

* Summary

Finally, the =home.nix= main configuration file imports all modules:

#+caption: =~/.config/nixpkgs/home.nix=
#+headers: :tangle home.nix
#+headers: :noweb yes
#+begin_src nix
  { config, pkgs, ... }:

  {
    imports = [
      ./modules/home-manager.nix
      ./modules/direnv.nix
      ./modules/emacs.nix
      ./modules/git.nix
      ./modules/tmux.nix
      ./modules/zsh.nix
    ];

    home = {
      username = "jeffkreeftmeijer";
      homeDirectory = "/Users/jeffkreeftmeijer";
      stateVersion = "22.11";
    };
  }
#+end_src
