:PROPERTIES:
:ID:       33B0C1A7-3CCE-46A3-90FE-71AE25517A15
:ROAM_ALIASES: nix-config
:END:
#+title: Nix configuration
#+author: Jeff Kreeftmeijer
#+options: toc:2

* Nix

** Install Nix

Follow the [[https://nixos.org/download.html#nix-install-macos][install instructions for macOS]], which guides you through the installation:

#+begin_src shell
  sh <(curl -L https://nixos.org/nix/install)
#+end_src

#+headers: :exports both
#+begin_src shell
  nix --version
#+end_src

#+RESULTS[aee53fea06d27ba12af92e6a4854ff89c5117281]:
: nix (Nix) 2.13.3

** Run a program with Nix

Use =nix run= to run a program with Nix.
For example, to try [[https://fishshell.com][fish]]:

#+begin_src shell
  nix run nixpkgs#fish\
      --extra-experimental-features nix-command \
      --extra-experimental-features flakes
#+end_src

This fetches the fish package from [[https://github.com/NixOS/nixpkgs][nixpkgs]], downloads it to the Nix store and starts it.
Although some fish files are found in the Nix store, fish isn't isnstalled on the main system after the Nix shell running it exits.

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+begin_src shell
  ls /nix/store/ | grep fish
#+end_src

#+RESULTS[eea63388eadbbe78035a725abd3842aa30653221]:
: 61zcpdy6dxr582jwzjnzi2vm8hyw97p6-fish-3.6.0.tar.xz.drv
: 6h7nvjphylacsmqjxz9cz3jab835ga68-fish-3.6.0.drv
: 9sbayh5pr3r8c9dh1navixin3psgvvyh-completion.fish
: d9r2150gr3b605pnsn5hydjc4zjxxsfc-config.fish.appendix.drv
: igsjkga6f9x3xd4l86phypx2jh4k92ks-completion.fish
: rwscd4qmlsmxc1idj9pxc5ab8543nfww-__fish_build_paths_suffix.fish.drv
: s1nbl9wxn68m846apki35iyiqrh4bkg5-fish-3.6.0

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+headers: :prologue exec 2>&1
#+headers: :epilogue ":"
#+begin_src shell
  which fish
#+end_src

#+RESULTS[01feaaf4eb76f1144d4ca3f56c1333e553dd9064]:
: fish not found

** Extra experimental features

The =nix run= command relies on the =nix-command= and =flakes= features. 
As of src_shell{nix --version | cut -d' ' -f3}, both of these are experimental and disabled by default:
They're enabled using the =--extra-experimental-features= flag:

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+headers: :prologue exec 2>&1
#+headers: :epilogue ":"
#+begin_src shell
  nix run nixpkgs#fish
#+end_src

#+RESULTS[4fad5848704d1feb332d0a04f64ad9ef1ad1e36d]:
: error: experimental Nix feature 'nix-command' is disabled; use '--extra-experimental-features nix-command' to override

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+headers: :prologue exec 2>&1
#+headers: :epilogue ":"
#+begin_src shell
  nix run nixpkgs#fish\
      --extra-experimental-features nix-command
#+end_src

#+RESULTS[d1b3fdc04ce92c33d4b81fdcecaac88c77e65ef9]:
: error: experimental Nix feature 'flakes' is disabled; use '--extra-experimental-features flakes' to override

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+headers: :prologue exec 2>&1
#+headers: :epilogue ":"
#+begin_src shell
  nix run nixpkgs#fish\
      --extra-experimental-features nix-command \
      --extra-experimental-features flakes
#+end_src

#+RESULTS[510f95eb10ca1709870b3ee9da687a852e72ddb6]:

To enable these features globally, set =experimental-featurs= in =nix.conf=:

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+begin_src shell
mkdir -p ~/.config/nix
echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
#+end_src

#+RESULTS[de1f90d1ff70c1f24cfcedec11dea87386110765]:

#+caption: =~/.config/nix/nix.conf=
#+include: ~/.config/nix/nix.conf src nix

* Home Manager

** Set up Home Manager

Set up a flake with the Home Manager template by running =flake new=:

#+headers: :prologue rm ~/.config/nixpkgs/flake.nix
#+begin_src shell
  nix flake new ~/.config/nixpkgs -t github:nix-community/home-manager
#+end_src

#+RESULTS:

#+caption: =~/.config/nixpkgs/flake.nix=
#+headers: :exports none
#+headers: :cache yes
#+headers: :results scalar
#+begin_src shell
cat ~/.config/nixpkgs/flake.nix
#+end_src

#+RESULTS[fe747e4c90aed55a57a2f6a465840189a6e6d475]:
#+begin_example
{
  description = "Home Manager configuration of Jane Doe";

  inputs = {
    # Specify the source of Home Manager and Nixpkgs.
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { nixpkgs, home-manager, ... }:
    let
      system = "x86_64-linux";
      pkgs = nixpkgs.legacyPackages.${system};
    in {
      homeConfigurations.jdoe = home-manager.lib.homeManagerConfiguration {
        inherit pkgs;

        # Specify your home configuration modules here, for example,
        # the path to your home.nix.
        modules = [ ./home.nix ];

        # Optionally use extraSpecialArgs
        # to pass through arguments to home.nix
      };
    };
}
#+end_example

Then, update the output system and username and remove the boilerplate:

#+caption: =~/.config/nixpkgs/flake.nix=
#+headers: :tangle flake.nix
#+begin_src nix
  {
    description = "Home Manager configuration";

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
      home-manager = {
        url = "github:nix-community/home-manager";
        inputs.nixpkgs.follows = "nixpkgs";
      };
    };

    outputs = { nixpkgs, home-manager, ... }:
      let
        system = "x86_64-darwin";
        pkgs = nixpkgs.legacyPackages.${system};
      in {
        homeConfigurations.jeffkreeftmeijer = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;

          modules = [
            ./home.nix
          ];
        };
      };
  }
#+end_src

For Home Manager's configuration, create =home.nix=.
It lists your use name and home directory, but also the =stateVersion=, which determines the Home Manager release the configuration is compatible with.
The =home.nix= file also sets up Home Manager to install and manage itself:

#+caption: =~/.config/nixpkgs/home.nix=
#+begin_src nix
  { config, pkgs, ... }:

  {
    home = {
      username = "jeffkreeftmeijer";
      homeDirectory = "/Users/jeffkreeftmeijer";
      stateVersion = "22.11";
    };

    programs.home-manager = {
      enable = true;
    };
  }
#+end_src

Finally, install Home Manager and apply the configuration:

#+begin_src shell
  nix run ~/.config/nixpkgs#homeConfigurations.jeffkreeftmeijer.activationPackage
#+end_src

Running the =activationPackage= generates a =flake.lock= file, which locks all packages to their currently installed versions for reproducability.
It only lists Home Manager now, but installed packages will be added to the list when they're added.

** Installing packages

To install a package, add it to =home.packages= in =home.nix=:

#+begin_src diff
diff --git a/home.nix b/home.nix
index 6f6f86d..12f9efe 100644
--- a/home.nix
+++ b/home.nix
@@ -5,6 +5,7 @@
     username = "jeffkreeftmeijer";
     homeDirectory = "/Users/jeffkreeftmeijer";
     stateVersion = "22.11";
+    packages = [ pkgs.git ];
   };
 
   programs.home-manager = {
#+end_src

Then, update the environment by running =home-manager switch=:

#+headers: :exports both
#+headers: :cache yes
#+headers: :results scalar
#+begin_src shell
  home-manager switch
#+end_src

#+RESULTS[a54bed91c273e3fba16b5667709e2e4fb742fbe2]:
#+begin_example
Starting Home Manager activation
Activating checkFilesChanged
Activating checkLaunchAgents
Activating checkLinkTargets
Activating writeBoundary
Activating copyFonts
Activating installPackages
replacing old 'home-manager-path'
installing 'home-manager-path'
Activating linkGeneration
Cleaning up orphan links from /Users/jeffkreeftmeijer
Creating profile generation 2
Creating home file links in /Users/jeffkreeftmeijer
Activating onFilesChange
Activating setupLaunchAgents
#+end_example

* Modules

** home-manager

Home manager added itself to =home.nix=, but we're moving it to a module to keep program-specific settings out of the main file:

#+caption: =~/.config/nixpkgs/modules/home-manager.nix=
#+headers: :tangle modules/home-manager.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:

  {
    programs.home-manager.enable = true;
  }
#+end_src

With the new module in place, import it in =home.nix= and remove the now duplicate =programs.home-manager=:

#+begin_src diff
diff --git a/home.nix b/home.nix
index 6f6f86d..09e001a 100644
--- a/home.nix
+++ b/home.nix
@@ -1,13 +1,13 @@
 { config, pkgs, ... }:
 
+imports = [
+  ./modules/home-manager.nix
+];
+
 {
   home = {
     username = "jeffkreeftmeijer";
     homeDirectory = "/Users/jeffkreeftmeijer";
     stateVersion = "22.11";
   };
-
-  programs.home-manager = {
-    enable = true;
-  };
 }
#+end_src

** git

#+headers: :exports both
#+begin_src shell
  git --version
#+end_src

#+RESULTS:
: git version 2.39.2

*** Settings
:PROPERTIES:
:header-args: :noweb-ref git-settings
:END:

**** Set the user name and email fields

#+begin_src nix
  programs.git.userName = "Jeff Kreeftmeijer";
  programs.git.userEmail = "jeffkreeftmeijer@gmail.com";
#+end_src

**** Use "main" as the default branch

#+begin_src nix
  programs.git.extraConfig.init.defaultBranch = "main";
#+end_src

**** Ignore ~.DS_Store~ files

#+begin_src nix
  programs.git.ignores = ["DS_Store"];
#+end_src

*** Nix configuration

#+caption: =~/.config/nixpkgs/modules/git.nix=
#+headers: :tangle modules/git.nix
#+headers: :noweb yes
#+begin_src nix
  {
    programs.git.enable = true;
    <<git-settings>>
  }
#+end_src

*** Generated configuration file

#+caption: =~/.config/git/config=
#+include: ~/.config/git/config src git

** tmux

#+headers: :exports both
#+begin_src shell
  tmux -V
#+end_src

#+RESULTS:
: tmux 3.3a

*** Settings

- Install an updated version of ncurses to [[id:B478D484-A76C-4271-87B7-3CD158DFFB71][fix issues with =tmux-256color= terminals]]

  #+name: tmux-packages
  #+begin_src nix
    home.packages = [ pkgs.ncurses ];
  #+end_src

- Remove tmux-sensible from [[id:962506BA-E734-4609-8E81-93ACBBFCF964][Nix tmux defaults]]:

  #+headers: :noweb-ref tmux-settings
  #+begin_src nix
    programs.tmux.sensibleOnTop = false;
  #+end_src

- [[id:F799F3F1-0AC3-4342-A3AB-51543BEC566B][Set =escape-time= to 0]]:

  #+headers: :noweb-ref tmux-settings
  #+begin_src nix
    programs.tmux.escapeTime = 0;
  #+end_src

*** Nix configuration

#+caption: =~/.config/nixpkgs/modules/tmux.nix=
#+headers: :tangle modules/tmux.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:
  {
    <<tmux-packages>>
    programs.tmux.enable = true;
    <<tmux-settings>>
  }
#+end_src

*** Generated configuration file

#+caption: =~/.config/tmux/tmux.conf=
#+include: ~/.config/tmux/tmux.conf src tmux

** zsh

#+headers: :exports both
#+begin_src shell
  zsh --version
#+end_src

#+RESULTS:
: zsh 5.9 (x86_64-apple-darwin22.3.0)

*** Settings
:PROPERTIES:
:header-args: :noweb-ref zsh-settings
:END:

**** [[id:340AEBBE-52C4-4157-B2D4-608484F3BD71][Disable command completion]]

#+begin_src nix
  enableCompletion = false;
#+end_src

*** Nix configuration

#+caption: =~/.config/nixpkgs/modules/zsh.nix=
#+headers: :tangle modules/zsh.nix
#+headers: :noweb yes
#+begin_src nix
  { pkgs, ... }:
  {
    programs.zsh = {
      enable = true;
      <<zsh-settings>>
    };
  }
#+end_src

*** Generated configuration file

#+caption: =~/.zshrc=
#+include: ~/.zshrc src zsh

* Summary

Finally, the =home.nix= main configuration file imports all modules:

#+caption: =~/.config/nixpkgs/home.nix=
#+headers: :tangle home.nix
#+headers: :noweb yes
#+begin_src nix
  { config, pkgs, ... }:

  {
    imports = [
      ./modules/home-manager.nix
      ./modules/git.nix
      ./modules/tmux.nix
      ./modules/zsh.nix
    ];

    home = {
      username = "jeffkreeftmeijer";
      homeDirectory = "/Users/jeffkreeftmeijer";
      stateVersion = "22.11";
    };
  }
#+end_src
